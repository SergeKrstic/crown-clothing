{
  // Place your crown-clothing workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "reactClassComponent (rcc)": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rcc",
    "body": "import React, { Component } from 'react';\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a React component class with ES6 module system"
  },
  "reactReduxComponent (rrc)": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rrc",
    "body": "import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nfunction mapStateToProps(state) {\n\treturn {\n\n\t};\n}\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default connect(\n\tmapStateToProps,\n)(${1:${TM_FILENAME_BASE}});",
    "description": "Creates a React component class connected to redux"
  },
  "reactReduxDispatchComponent": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rrdc",
    "body": "import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nfunction mapStateToProps(state) {\n\treturn {\n\n\t};\n}\n\nfunction mapDispatchToProps(dispatch) {\n\treturn {\n\n\t};\n}\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default connect(\n\tmapStateToProps,\n)(${1:${TM_FILENAME_BASE}});",
    "description": "Creates a React component class connected to redux with dispatch"
  },
  "reactJustClassComponent": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rcjc",
    "body": "class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n",
    "description": "Creates a React component class with ES6 module system"
  },
  "reactClassComponentPropTypes": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rccp",
    "body": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a React component class with PropTypes and ES6 module system"
  },
  "reactClassComponentWithMethods": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rcfc",
    "body": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t}\n\n\tcomponentWillMount() {\n\n\t}\n\n\tcomponentDidMount() {\n\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\n\t}\n\n\tshouldComponentUpdate(nextProps, nextState) {\n\n\t}\n\n\tcomponentWillUpdate(nextProps, nextState) {\n\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\n\t}\n\n\tcomponentWillUnmount() {\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a React component class with PropTypes and all lifecycle methods and ES6 module system"
  },
  "reactWithWebpackDefaults": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rwwd",
    "body": "class ${1:${TM_FILENAME_BASE}} extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {};\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a React component class with constructor, empty state, proptypes and export in ES6 module system without imports. (Mostly used when React, Proptypes are provided by webpack provide plugin)"
  },
  "reactPureComponent": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rpc",
    "body": "import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ${1:${TM_FILENAME_BASE}} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a React pure component class with PropTypes and ES6 module system"
  },
  "reactStateless": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rsc",
    "body": "import React from 'react';\n\nconst ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a stateless React component without PropTypes and ES6 module system"
  },
  "reactStatelessProps": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rscp",
    "body": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ${1:${TM_FILENAME_BASE}} = props => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n};\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t$0\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a stateless React component with PropTypes and ES6 module system"
  },
  "flowStatelessComponent": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "fsc",
    "body": "// @flow \nimport * as React from 'react';\ntype Props = {\n\t$0\n};\nexport const ${1:${TM_FILENAME_BASE}} = (props: Props) => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n};",
    "description": "Creates a stateless React component with FlowTypes and ES6 module system"
  },
  "flowStatelessFunction": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "fsf",
    "body": [
      "// @flow",
      "import * as React from 'react';",
      "type Props = {",
      "  $0",
      "};",
      "export function ${1:${TM_FILENAME_BASE}}(props: Props) {",
      "  return (",
      "    <div>",
      "      ",
      "    </div>",
      "  );",
      "};"
    ],
    "description": "Creates a stateless React component as a named function with FlowTypes"
  },
  "flowClassComponent": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "fcc",
    "body": [
      "// @flow",
      "import * as React from 'react';",
      "type Props = {",
      "  $0",
      "};",
      "type State = {",
      "  $1",
      "};",
      "export class ${2:${TM_FILENAME_BASE}} extends React.Component<Props, State>{",
      "  render() {",
      "    return (",
      "      <div>",
      "        ",
      "      </div>",
      "    );",
      "  };",
      "};"
    ],
    "description": "Creates a React component class with FlowTypes"
  },
  "reactStatelessFunction": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rsf",
    "body": "import React from 'react';\n\nfunction ${1:${TM_FILENAME_BASE}(props) {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n}\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a stateless React component as a named function without PropTypes"
  },
  "reactStatelessFunctionProps": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rsfp",
    "body": "import React from 'react';\nimport PropTypes from 'prop-types';\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t$0\n};\n\nfunction ${1:${TM_FILENAME_BASE}(props) {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n}\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a stateless React component as a named function with PropTypes"
  },
  "reactStatelessImplicitReturn": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rsi",
    "body": "import React from 'react';\n\nconst ${1:${TM_FILENAME_BASE}} = (props) => (\n\t\t\t$0\n\t);\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a stateless React component without PropTypes and ES6 module system but with Implicit Return and props"
  },
  "classConstructor": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "con",
    "body": "constructor(props) {\n\tsuper(props);\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props as arguments"
  },
  "classConstructorContext": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "conc",
    "body": "constructor(props, context) {\n\tsuper(props, context);\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props and context as arguments"
  },
  "emptyState": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "est",
    "body": "this.state = {\n\t$1\n};",
    "description": "Creates empty state object. To be used in a constructor."
  },
  "componentWillMount": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "cwm",
    "body": "\ncomponentWillMount() {\n\t$0\n}\n",
    "description": "Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },
  "componentDidMount": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "cdm",
    "body": "componentDidMount() {\n\t$0\n}\n",
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "componentWillReceiveProps": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "cwr",
    "body": "componentWillReceiveProps(nextProps) {\n\t$0\n}\n",
    "description": "Invoked when a component is receiving new props. This method is not called for the initial render. [DEPRECATION NOTE]: This method is deprecated in React 16.3"
  },
  "shouldComponentUpdate": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "scu",
    "body": "shouldComponentUpdate(nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "componentWillUpdate": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "cwup",
    "body": "componentWillUpdate(nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked immediately before rendering when new props or state are being received. [DEPRECATION NOTE]: This method is deprecated in React 16.3"
  },
  "componentDidUpdate": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "cdup",
    "body": "componentDidUpdate(prevProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "componentWillUnmount": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "cwun",
    "body": "componentWillUnmount() {\n\t$0\n}\n",
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "componentRender": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ren",
    "body": "render() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n}",
    "description": "When called, it should examine this.props and this.state and return a single child element."
  },
  "componentSetStateObject": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "sst",
    "body": "this.setState($0);",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "componentSetStateFunc": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ssf",
    "body": "this.setState((state, props) => { return { $0 }});\n",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "componentProps": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "props",
    "body": "this.props.$0",
    "description": "Access component's props"
  },
  "componentState": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "state",
    "body": "this.state.$0",
    "description": "Access component's state"
  },
  "bindThis": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "bnd",
    "body": "this.$1 = this.$1.bind(this);$0",
    "description": "Binds the this of a method. To be used inside a constructor"
  },
  "propTypes": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rpt",
    "body": "${1:$TM_FILENAME_BASE}.propTypes = {\n\t$2\n};",
    "description": "Creates empty propTypes declaration"
  },
  "defaultProps": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rdp",
    "body": "$1.defaultProps = {\n\t$2\n};",
    "description": "Creates empty defaultProps declaration"
  },
  "propTypeArray": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type"
  },
  "propTypeObjectRequired": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required"
  },
  "propTypeString": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeNode": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptet",
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptetr",
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
  "propTypeObjectOf": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeObjectOfShape": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptoos",
    "body": "PropTypes.objectOf(PropTypes.shape($0)),",
    "description": "An object whose keys are known ahead of time"
  },
  "propTypeObjectOfShapeRequired": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptoosr",
    "body": "PropTypes.objectOf(PropTypes.shape($0)).isRequired,",
    "description": "An object whose keys are known ahead of time required"
  },
  "propTypeShape": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptsh",
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ptshr",
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required"
  },
  "getSnapshotBeforeUpdate": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "gsbu",
    "body": "getSnapshotBeforeUpdate(prevProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked right before the most recently rendered output is committed to e.g. the DOM. It enables your component to capture current values"
  },
  "getDerivedStateFromProps": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "gdsfp",
    "body": "static getDerivedStateFromProps(nextProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked after a component is instantiated as well as when it receives new props."
  },
  "componentDidCatch": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "cdc",
    "body": "componentDidCatch(error, info) {\n\t$0\n}\n",
    "description": "Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them."
  },
  "dispatchRedux": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "disp",
    "body": "function mapDispatchToProps(dispatch) {\n\treturn {\n\t}\n\n}",
    "description": "Adds the redux mapDispatchToProps function"
  }
}
